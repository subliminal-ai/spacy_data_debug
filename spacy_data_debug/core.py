#AUTOGENERATED! DO NOT EDIT! File to edit: dev/00_core.ipynb (unless otherwise specified).

__all__ = ['fix_annotations_format', 'dataset_stats', 'ents_by_label', 'get_label_disparities']

#Cell
from collections import defaultdict
import copy
import json
from pathlib import Path
from typing import Dict, List

import srsly
import spacy
from spacy.pipeline import EntityRuler
from spacy.language import Language

#Cell
def fix_annotations_format(data):
    for e in data:
        if 'meta' not in e:
            e['meta'] = {}
        if isinstance(e['meta'], list):
            e['meta'] = {
                'source': e['meta']
            }

        for s in e['spans']:
            if 'text' not in s:
                s['text'] = e['text'][s['start']:s['end']]
            s['label'] = s['label'].upper()
    return data

#Cell
def dataset_stats(data: List[Dict[str, object]], serialize=False):
    labels = defaultdict(int)
    examples = defaultdict(list)
    n_examples_no_entities = 0
    for e in data:
        if not e['spans']:
            n_examples_no_entities += 1
            examples['NONE'].append(e)
        else:
            for s in e['spans']:
                label = s['label']
                labels[label] += 1
                examples[label].append(e)

    res = {
        'n_examples': len(data),
        'n_examples_no_entities': n_examples_no_entities,
        'ents_per_type': labels
    }
    if serialize:
        return srsly.json_dumps(res, indent=4)
    else:
        res['examples_with_type'] = examples
        return res

#Cell
def ents_by_label(data: List[Dict[str, object]]):
    """Get a dictionary of unique text spans by label for your data"""
    annotations = defaultdict(set)

    for e in data:
        for s in e['spans']:
            lower_text = s.get('text', e['text'][s['start']:s['end']])
            annotations[s['label']].add(lower_text)

    for label in annotations.keys():
        annotations[label] = sorted(annotations[label])

    return annotations

#Cell
def get_label_disparities(data: List[Dict[str, object]], label1: str, label2: str):
    """Identify annotated spans that have different labels in different examples"""
    annotations = ents_by_label(data)
    if label1 and label2:
        return set(annotations[label1]).intersection(set(annotations[label2]))